<template>
  <div class="map-page">
    <div class="map-container">
      <!-- 地图检测机制和错误显示 -->
      <div class="map-error-container" show="{{ !isMapDataValid() }}">
        <text class="map-error-title">地图无法显示</text>
        <text class="map-error-message">{{ getMapErrorMessage() }}</text>
      </div>
      
      <!-- 地图显示容器 - 只有在所有检测通过时才显示 -->
      <div class="map-display-container" show="{{ isMapDataValid() }}">
    
    <!-- 10x10地形网格显示 -->
    <div class="terrain-grid" show="{{ terrainGrid && Array.isArray(terrainGrid) && terrainGrid.length > 0 }}">
      <div class="terrain-row" for="{{(row, rowIndex) in terrainGrid}}" show="{{ row && Array.isArray(row) }}">
          <div class="terrain-tile-container" for="{{(tile, colIndex) in row}}" show="{{ tile }}">
            <!-- 地形背景 -->
            <image class="terrain-tile-bg" src="{{ getBiomePath(tile.biome) }}" onerror="handleImageError"></image>
            <!-- 地形特征 -->
            <image class="terrain-tile-hill" show="{{ tile.hill && tile.hill !== '' }}" src="{{ getHillPath(tile.hill) }}" onerror="handleImageError"></image>
            <!-- 地形物体 -->
            <image class="terrain-tile-object" show="{{ tile.object && tile.object !== '' }}" src="{{ getObjectPath(tile.object) }}" onerror="handleImageError"></image>
          

        </div>
      </div>
    </div>
    

      </div>
    </div>
    
    <!-- 底部导航 -->
    <div class="bottom-nav">
      <input class="nav-btn" type="button" value="保存" onclick="saveGame" />
      <input class="nav-btn {{ autoMoveEnabled ? 'auto-move-on' : 'auto-move-off' }}" type="button" value="{{ autoMoveEnabled ? '停止挂机' : '开启挂机' }}" onclick="toggleAutoMovement" />
      <input class="nav-btn" type="button" value="返回" onclick="goBack" />
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      terrainGrid: [],
      playerPosition: { x: 2, y: 2 },

      autoMoveEnabled: false
    }
  },
  
  onInit() {
    // 尝试从父组件获取数据
    this.syncWithParentData()
    
    // 如果没有数据，则初始化默认地形数据
    if (!this.terrainGrid || this.terrainGrid.length === 0) {
      this.initializeTerrainGrid()
    }
    

  },
  
  methods: {
    // 地图数据验证 - 多重检测机制
    isMapDataValid() {
      // 检测1: terrainGrid基本存在性
      if (!this.terrainGrid) {
        return false
      }
      
      // 检测2: terrainGrid数组类型验证
      if (!Array.isArray(this.terrainGrid)) {
        return false
      }
      
      // 检测3: terrainGrid长度验证
      if (this.terrainGrid.length === 0) {
        return false
      }
      
      // 检测4: 每行数据验证
      for (let i = 0; i < this.terrainGrid.length; i++) {
        const row = this.terrainGrid[i]
        if (!row || !Array.isArray(row) || row.length === 0) {
          return false
        }
        
        // 检测5: 每个瓦片数据验证
        for (let j = 0; j < row.length; j++) {
          const tile = row[j]
          if (!tile || typeof tile !== 'object' || !tile.biome) {
            return false
          }
        }
      }
      
      // 检测6: 玩家位置验证
      if (!this.playerPosition || 
          typeof this.playerPosition.x !== 'number' || 
          typeof this.playerPosition.y !== 'number' ||
          this.playerPosition.x < 0 || 
          this.playerPosition.y < 0 ||
          this.playerPosition.x >= this.terrainGrid[0].length ||
          this.playerPosition.y >= this.terrainGrid.length) {
        return false
      }
      

      
      return true
    },
    
    // 获取地图错误信息
    getMapErrorMessage() {
      if (!this.terrainGrid) {
        return '由于地形数据未初始化导致地图无法显示'
      }
      
      if (!Array.isArray(this.terrainGrid)) {
        return '由于地形数据格式错误导致地图无法显示'
      }
      
      if (this.terrainGrid.length === 0) {
        return '由于地形数据为空导致地图无法显示'
      }
      
      // 检查行数据
      for (let i = 0; i < this.terrainGrid.length; i++) {
        const row = this.terrainGrid[i]
        if (!row || !Array.isArray(row)) {
          return `由于第${i}行地形数据格式错误导致地图无法显示`
        }
        if (row.length === 0) {
          return `由于第${i}行地形数据为空导致地图无法显示`
        }
        
        // 检查瓦片数据
        for (let j = 0; j < row.length; j++) {
          const tile = row[j]
          if (!tile || typeof tile !== 'object') {
            return `由于地形瓦片[${i}][${j}]数据无效导致地图无法显示`
          }
          if (!tile.biome) {
            return `由于地形瓦片[${i}][${j}]缺少生物群系信息导致地图无法显示`
          }
        }
      }
      
      // 检查玩家位置
      if (!this.playerPosition || 
          typeof this.playerPosition.x !== 'number' || 
          typeof this.playerPosition.y !== 'number') {
        return '由于玩家位置数据无效导致地图无法显示'
      }
      
      if (this.playerPosition.x < 0 || 
          this.playerPosition.y < 0 ||
          this.playerPosition.x >= this.terrainGrid[0].length ||
          this.playerPosition.y >= this.terrainGrid.length) {
        return '由于玩家位置超出地图范围导致地图无法显示'
      }
      
      // 检查角色路径

      
      return '由于未知错误导致地图无法显示'
    },
    
    // 获取详细验证信息
    getValidationDetails() {
      const details = {
        terrainGrid存在: !!this.terrainGrid,
        terrainGrid类型: typeof this.terrainGrid,
        是否数组: Array.isArray(this.terrainGrid),
        数组长度: this.terrainGrid ? this.terrainGrid.length : 0,
        玩家位置: this.playerPosition,

      }
      return JSON.stringify(details)
    },
    
    // 从父组件同步数据
    syncWithParentData() {
      try {
        // 尝试从父组件获取数据
        if (this.$parent) {
          if (this.$parent.terrainGrid && Array.isArray(this.$parent.terrainGrid) && this.$parent.terrainGrid.length > 0) {
            this.terrainGrid = this.$parent.terrainGrid
          }
          
          if (this.$parent.playerPosition) {
            this.playerPosition = this.$parent.playerPosition
          }
          

          
          if (this.$parent.currentTileInfo) {
            this.currentTileInfo = this.$parent.currentTileInfo
          }
        }
      } catch (error) {
        // 静默处理错误
      }
    },
    
    // 初始化地形网格数据
    initializeTerrainGrid() {
      const biomes = ['TemperateForest', 'BorealForest', 'TropicalRainforest', 'AridShrubland', 'Desert']
      const hills = [null, 'SmallHills', 'LargeHills', 'Mountains']
      const objects = [null, null, null, 'Town', 'AncientRoad'] // 大部分为空，少数有物体
      
      this.terrainGrid = []
      for (let i = 0; i < 5; i++) {
        const row = []
        for (let j = 0; j < 5; j++) {
          const tile = {
            biome: biomes[Math.floor(Math.random() * biomes.length)],
            hill: hills[Math.floor(Math.random() * hills.length)],
            object: objects[Math.floor(Math.random() * objects.length)]
          }
          row.push(tile)
        }
        this.terrainGrid.push(row)
      }
      

    },
    
    // 获取生物群系图片路径
    getBiomePath(biome) {
      return `common/world/biomes/${biome}.png`
    },
    
    // 获取地形特征图片路径
    getHillPath(hill) {
      if (!hill || hill === '') {
        return ''
      }
      return `common/world/hills/${hill}.png`
    },
    
    // 获取地形物体图片路径
    getObjectPath(object) {
      if (!object || object === '') {
        return ''
      }
      
      // 根据物体类型选择不同的子目录
      let subDir = 'objects'
      if (object.includes('Tree') || object.includes('tree')) {
        subDir = 'trees'
      } else if (object.includes('Rock') || object.includes('rock')) {
        subDir = 'rocks'
      }
      
      return `common/world/${subDir}/${object}.png`
    },
    

    
    // 处理图片加载错误
    handleImageError(event) {
      // 静默处理图片加载错误
      // 在VelaOS中，让图片自然隐藏
    },
    
    // 保存游戏
    saveGame() {
      try {
        console.log('保存游戏状态')
        // 这里可以添加保存逻辑
      } catch (error) {
        console.error('保存失败:', error)
      }
    },
    
    // 切换挂机模式
    toggleAutoMovement() {
      this.autoMoveEnabled = !this.autoMoveEnabled
      console.log('挂机模式:', this.autoMoveEnabled ? '开启' : '关闭')
    },
    
    // 返回上一页
    goBack() {
      this.$app.router.back()
    }
  }
}
</script>

<style>
.map-page {
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: #2d2d2d;
}

.map-container {
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  flex: 1;
  position: relative;
  background-color: transparent;
}

.map-error-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background-color: rgba(139, 0, 0, 0.9);
  border: 2px solid #ff0000;
  border-radius: 8px;
  max-width: 80%;
  text-align: center;
}

.map-error-title {
  color: #ffffff;
  font-size: 14px;
  font-weight: bold;
  margin-bottom: 8px;
  line-height: 14px;
}

.map-error-message {
  color: #ffcccc;
  font-size: 10px;
  margin-bottom: 5px;
  line-height: 12px;
  word-wrap: break-word;
}

.map-display-container {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.map-status-indicator {
  position: absolute;
  top: 3px;
  left: 5px;
  right: 5px;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2px;
  background-color: rgba(0, 0, 0, 0.8);
  border: 1px solid #FFD700;
  border-radius: 3px;
  max-height: 30px;
  overflow: hidden;
}

.map-status-text {
  color: #FFD700;
  font-size: 10px;
  font-weight: bold;
  text-align: center;
  margin-bottom: 1px;
  line-height: 10px;
}



.player-status-text {
  color: #00ff00;
  font-size: 8px;
  text-align: center;
  line-height: 8px;
}



.terrain-grid {
  position: absolute;
  top: 35px;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  background-color: transparent;
  padding: 5px;
  margin: 0 auto;
  max-width: 100%;
}

.terrain-row {
  display: flex;
  flex-direction: row;
  flex: 1;
  width: 100%;
  margin: 0;
}

.terrain-tile-container {
  position: relative;
  flex: 1;
  width: 10%;
  height: 100%;
  margin: 0;
  border: 1px solid rgba(139, 69, 19, 0.3);
}

.terrain-tile-bg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.terrain-tile-hill {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.terrain-tile-object {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.player-character {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9;
}



/* 底部导航样式 */
.bottom-nav {
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  width: 100%;
  height: 80px;
  padding: 0 20px;
  background-color: #1a1a1a;
  border-top: 2px solid #444;
}

.nav-btn {
  width: 120px;
  height: 50px;
  background-color: #4a4a4a;
  color: #ffffff;
  border: 2px solid #666;
  border-radius: 8px;
  font-size: 24px;
  font-weight: bold;
  text-align: center;
}



.auto-move-on {
  background-color: #ff6b6b;
  border-color: #ff4757;
}

.auto-move-off {
  background-color: #4a4a4a;
  border-color: #666;
}
</style>