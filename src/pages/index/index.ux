<template>
  <div class="main-page">
    <!-- 游戏logo -->
    <image class="game-logo" src="/common/GameTitle.png"></image>
    
    <!-- 主内容区域 -->
    <div class="main-content">
      <!-- 人物模型展示区域 -->
      <div class="character-showcase">
        <div class="character-item" if="{{showCharacter}}" onclick="regenerateCharacter">
          <!-- 人物模型 -->
          <div class="character-model-mini">
            <!-- 身体 -->
            <image class="character-part-mini body-part-mini" src="{{characterPaths.body}}" if="{{characterPaths.body}}"></image>
            <!-- 头部 -->
            <image class="character-part-mini head-part-mini" src="{{characterPaths.head}}" if="{{characterPaths.head}}"></image>
            <!-- 胡须 -->
            <image class="character-part-mini beard-part-mini" src="{{characterPaths.beard}}" if="{{characterPaths.beard}}"></image>
            <!-- 头发 -->
            <image class="character-part-mini hair-part-mini" src="{{characterPaths.hair}}" if="{{characterPaths.hair}}"></image>
          </div>
          <!-- 人物名字 -->
          <text class="character-name">{{characterName}}</text>
        </div>
        
        <!-- 加载提示 -->
        <div class="character-loading" if="{{!showCharacter}}">
          <text class="loading-text">生成人物中...</text>
        </div>
      </div>
      
      <!-- 主菜单按钮 -->
      <div class="menu-buttons">
        <input class="menu-btn" type="button" value="{{ enterColonyButtonText }}" onclick="enterColony" />
        <input class="menu-btn" type="button" value="开始新旅程" onclick="startNewJourney" />
        <input class="menu-btn" type="button" value="存档测试" onclick="goToSaveTest" />
        <input class="menu-btn" type="button" value="回到现实" onclick="backToReality" />
      </div>
    </div>
  </div>
</template>

<script>
import router from "@system.router"
import configuration from "@system.configuration"
import saveManager from "../../common/saveManager.js"
import humanDisplay from "../../common/humanDisplay.js"
import nameGenerator from "../../common/nameGenerator.js"

export default {
  // 页面级组件的数据模型
  private: {
    title: "RimWorld",
    enterColonyButtonText: "进入殖民地",
    // 人物模型相关数据
    characterModel: null,
    characterName: '',
    characterPaths: {
      body: '',
      head: '',
      hair: '',
      beard: ''
    },
    showCharacter: false
  },
  
  async onInit() {
    this.updateEnterColonyButton()
    await this.initializeCharacterDisplay()
  },

  // 更新进入殖民地按钮文案
  updateEnterColonyButton() {
    saveManager.getSaveList().then(saveList => {
      if (saveList.length > 0) {
        const latestSave = saveList[0]
        const saveDate = new Date(latestSave.timestamp)
        const dateStr = `${saveDate.getMonth() + 1}/${saveDate.getDate()}`
        this.enterColonyButtonText = `继续游戏 (${latestSave.name})`
      } else {
        this.enterColonyButtonText = "进入殖民地"
      }
    }).catch(error => {
      console.error('获取存档列表失败:', error)
      this.enterColonyButtonText = "进入殖民地"
    })
  },

  // 初始化人物模型显示
  async initializeCharacterDisplay() {
    try {
      console.log('🎭 开始初始化人物模型显示...')
      
      // 初始化人物显示系统
      await humanDisplay.initializeHumanDisplay()
      
      // 生成随机人物模型
      this.generateRandomCharacter()
      
      console.log('🎭 人物模型显示初始化完成')
    } catch (error) {
      console.error('❌ 人物模型显示初始化失败:', error)
    }
  },

  // 生成随机人物
  generateRandomCharacter() {
    try {
      // 随机选择性别
      const genders = ['male', 'female']
      const randomGender = genders[Math.floor(Math.random() * genders.length)]
      
      // 生成随机人物配置
      this.characterModel = humanDisplay.generateRandomHumanConfig(randomGender)
      
      // 生成随机名字
      this.characterName = nameGenerator.generateRandomName()
      
      // 更新人物路径
      this.updateCharacterPaths()
      
      // 显示人物
      this.showCharacter = true
      
      console.log('🎭 生成随机人物:', {
        name: this.characterName,
        gender: randomGender,
        model: this.characterModel
      })
    } catch (error) {
      console.error('❌ 生成随机人物失败:', error)
    }
  },

  // 更新人物模型路径
  updateCharacterPaths() {
    if (!this.characterModel) return
    
    try {
      // 使用south方向作为默认显示方向
      const direction = 'south'
      const paths = humanDisplay.getHumanPartsPaths(this.characterModel, direction)
      
      this.characterPaths = {
        body: paths.body || '',
        head: paths.head || '',
        hair: paths.hair || '',
        beard: paths.beard || ''
      }
      
      console.log('🎭 更新人物路径:', this.characterPaths)
    } catch (error) {
      console.error('❌ 更新人物路径失败:', error)
    }
  },

  // 重新生成人物（点击人物模型时触发）
  regenerateCharacter() {
    console.log('🎭 重新生成人物...')
    this.generateRandomCharacter()
  },

  enterColony() {
    // 检查是否有存档，如果有则直接进入游戏
    saveManager.getSaveList().then(saveList => {
      if (saveList.length > 0) {
        // 有存档，获取最近的存档
        const latestSave = saveList[0] // 存档列表已按时间戳降序排列
        console.log(`找到最近存档: ${latestSave.name}，准备进入游戏`)
        
        // 加载存档数据
        return saveManager.loadGame(latestSave.name)
      } else {
        // 没有存档，跳转到殖民地管理页面
        console.log('没有找到存档，跳转到殖民地管理页面')
        router.push({
          uri: "/pages/colony"
        })
        return null
      }
    }).then(saveData => {
      if (saveData && saveData.data) {
        console.log(`存档加载成功，进入游戏页面`)
        // 直接跳转到游戏页面，并传递存档数据
        router.push({
          uri: "/pages/game",
          params: {
            loadFromSave: true,
            saveData: JSON.stringify(saveData.data),
            saveName: saveData.name
          }
        })
      }
    }).catch(error => {
      console.error('加载存档失败:', error)
      // 加载失败，跳转到殖民地管理页面
      router.push({
        uri: "/pages/colony"
      })
    })
  },

  startNewJourney() {
    // 开始新旅程，跳转到殖民者定制页面
    router.push({
      uri: "/pages/colonist"
    })
  },

  backToReality() {
    // 退出游戏或返回上级页面
    router.back()
  },
  

  
  // 跳转到存档测试页面
  goToSaveTest() {
    router.push({
      uri: '/pages/test'
    })
  }
}
</script>

<style>
.main-page {
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-image: url('/common/MindbendCarpet_a_512.png');
  background-size: cover;
  background-position: center;
  width: 100%;
  height: 100%;
  padding: 20px;
}

.main-content {
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  max-width: 350px;
}

.game-logo {
  width: 360px;
  height: 120px;
  margin-bottom: 20px;
  object-fit: contain;
}

/* 人物展示区域样式 */
.character-showcase {
  width: 120px;
  height: 200px;
  margin-right: 20px;
}

.character-item {
  flex-direction: column;
  align-items: center;
  padding: 4px;
  background-color: rgba(0,0,0,0.3);
  border-radius: 6px;
  border: 1px solid rgba(139, 69, 19, 0.5);
  height: 100%;
  justify-content: space-between;
}

.character-model-mini {
  position: relative;
  width: 90%;
  height: 100%;
  flex: 1;
  align-self: center;
}

.character-part-mini {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
}

.body-part-mini {
  z-index: 0;
  top: 8px;
}

.head-part-mini {
  z-index: 0;
  top: -25px;
}

.beard-part-mini {
  z-index: 2;
  top: -22px;
}

.hair-part-mini {
  z-index: 2;
  top: -30px;
}

.character-name {
  font-size: 14px;
  color: #ffffff;
  text-align: center;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
  margin-top: 5px;
  width: 100%;
}

.character-loading {
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 120px;
  height: 200px;
  margin-right: 20px;
  background-color: rgba(0,0,0,0.3);
  border-radius: 6px;
  border: 1px solid rgba(139, 69, 19, 0.5);
}

.loading-text {
  font-size: 14px;
  color: #ffffff;
  text-align: center;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
}

.menu-buttons {
  flex-direction: column;
  align-items: center;
  width: 180px;
}

.menu-btn {
  width: 180px;
  height: 45px;
  margin-bottom: 15px;
  border-radius: 8px;
  background-color: rgba(139, 69, 19, 0.8);
  font-size: 16px;
  color: #ffffff;
  border: 2px solid #8B4513;
  text-align: center;
}

.menu-btn {
  background-color: rgba(160, 82, 45, 0.9);
}
</style>
